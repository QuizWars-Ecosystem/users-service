// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: external/questions/v1/client.proto

package questionsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionsClientService_GetCategories_FullMethodName = "/questions.v1.QuestionsClientService/GetCategories"
)

// QuestionsClientServiceClient is the client API for QuestionsClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionsClientServiceClient interface {
	GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
}

type questionsClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionsClientServiceClient(cc grpc.ClientConnInterface) QuestionsClientServiceClient {
	return &questionsClientServiceClient{cc}
}

func (c *questionsClientServiceClient) GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, QuestionsClientService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionsClientServiceServer is the server API for QuestionsClientService service.
// All implementations should embed UnimplementedQuestionsClientServiceServer
// for forward compatibility.
type QuestionsClientServiceServer interface {
	GetCategories(context.Context, *emptypb.Empty) (*GetCategoriesResponse, error)
}

// UnimplementedQuestionsClientServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionsClientServiceServer struct{}

func (UnimplementedQuestionsClientServiceServer) GetCategories(context.Context, *emptypb.Empty) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedQuestionsClientServiceServer) testEmbeddedByValue() {}

// UnsafeQuestionsClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionsClientServiceServer will
// result in compilation errors.
type UnsafeQuestionsClientServiceServer interface {
	mustEmbedUnimplementedQuestionsClientServiceServer()
}

func RegisterQuestionsClientServiceServer(s grpc.ServiceRegistrar, srv QuestionsClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionsClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionsClientService_ServiceDesc, srv)
}

func _QuestionsClientService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsClientServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsClientService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsClientServiceServer).GetCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionsClientService_ServiceDesc is the grpc.ServiceDesc for QuestionsClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionsClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questions.v1.QuestionsClientService",
	HandlerType: (*QuestionsClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategories",
			Handler:    _QuestionsClientService_GetCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/questions/v1/client.proto",
}
