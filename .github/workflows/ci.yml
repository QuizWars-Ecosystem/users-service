name: Test, Release, Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Ensure go mod tidy has zero output
        run: go mod tidy -v && git diff --exit-code

      - name: Install go-cover-treemap
        run: go install github.com/nikolaydubina/go-cover-treemap@latest

      - name: Run integration tests with coverage
        run: |
          mkdir -p docs
          COVERPKG=$(go list ./internal/... | grep -v '/server/server.go$' | paste -sd, -)
          go test -v -coverpkg=$COVERPKG -coverprofile=cover.out ./tests/integration_tests
          go-cover-treemap -percent=true -w=1080 -h=360 -coverprofile=cover.out > docs/coverage.svg

      - name: Commit and push coverage SVG to repo
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/coverage.svg
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin main

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Run go-semantic-release
        uses: go-semantic-release/action@v1
        with:
          hooks: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag or fallback
        id: get_tag
        run: |
          TAG=$(git tag --sort=-creatordate | tail -n 1)
          if [ -z "$TAG" ]; then
            TAG="v1.0.0"
            echo "::notice ::No tag found, defaulting to $TAG"
          fi
          echo "tag=$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (if not exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_tag.outputs.tag }}
        run: |
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists, skipping creation."
          else
            gh release create "$VERSION" --generate-notes
          fi


      - name: Create GitHub Release (if not exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_tag.outputs.tag }}
        run: |
          if [ -n "$VERSION" ]; then
            gh release view "$VERSION" >/dev/null 2>&1 || \
            gh release create "$VERSION" --generate-notes
          else
            echo "No new tag created, skipping release step."
          fi

  docker-push:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.QUIZWARS_DOCKER_USERNAME }}
          password: ${{ secrets.QUIZWARS_DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        run: |
          TAG=${{ needs.release.outputs.tag }}
          if [ -z "$TAG" ]; then
            echo "No tag available for Docker image. Skipping push."
            exit 0
          fi
          IMAGE=davidmovas/quizwars-users-service
          docker build -t $IMAGE:$TAG .
          docker tag $IMAGE:$TAG $IMAGE:latest
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest

  build-and-push-migrations:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Build and Push DB Migrations
    needs: release
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for changes in migrations/
        id: check_migrations
        run: |
          if git diff --quiet HEAD~1 HEAD -- migrations/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no changes in migrations/
        if: steps.check_migrations.outputs.changed == 'false'
        run: |
          echo "No changes in migrations/, skipping build."
          exit 0

      - name: Detect service name from repo
        id: service_name
        run: |
          NAME=$(basename ${{ github.repository }})
          NAME_CLEANED=$(echo $NAME | sed 's/-service//')
          echo "name=$NAME_CLEANED" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-creatordate | tail -n 1)
          if [ -z "$TAG" ]; then
            TAG="v1.0.0"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.QUIZWARS_DOCKER_USERNAME }}
          password: ${{ secrets.QUIZWARS_DOCKER_PASSWORD }}

      - name: Build and Push Migration Image
        run: |
          SERVICE=${{ steps.service_name.outputs.name }}
          VERSION=${{ steps.get_tag.outputs.tag }}
          IMAGE=davidmovas/quizwars-migrations:$SERVICE-$VERSION
          docker build -f tern.dockerfile -t $IMAGE .
          docker push $IMAGE
          docker tag $IMAGE davidmovas/quizwars-migrations:$SERVICE-latest
          docker push davidmovas/quizwars-migrations:$SERVICE-latest

    
