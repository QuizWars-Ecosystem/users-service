name: Test, Release, Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Ensure go mod tidy has zero output
        run: go mod tidy -v && git diff --exit-code

      - name: Install go-cover-treemap
        run: go install github.com/nikolaydubina/go-cover-treemap@latest

      - name: Run integration tests with coverage
        run: |
          mkdir -p docs
          COVERPKG=$(go list ./internal/... | grep -v '/server/server.go$' | paste -sd, -)
          go test -v -coverpkg=$COVERPKG -coverprofile=cover.out ./tests/integration_tests
          go-cover-treemap -percent=true -w=1080 -h=360 -coverprofile=cover.out > docs/coverage.svg

      - name: Commit and push coverage SVG to repo
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/coverage.svg
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin main

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Use go-semantic-release
        uses: go-semantic-release/action@v1
        with:
          hooks: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract latest tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$TAG" ]; then
            TAG="0.0.1"
          fi
          echo "tag=$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get_tag.outputs.tag }}
          gh release create $VERSION ./dist/* --title "Release $VERSION" --notes "Release notes for $VERSION" 

  docker-push:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.QUIZWARS_DOCKER_USERNAME }}
          password: ${{ secrets.QUIZWARS_DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        run: |
          IMAGE=davidmovas/quizwars-users-service
          VERSION=${{ needs.release.outputs.tag }}
          docker build -t $IMAGE:$VERSION .
          docker tag $IMAGE:$VERSION $IMAGE:latest
          docker push $IMAGE:$VERSION
          docker push $IMAGE:latest
