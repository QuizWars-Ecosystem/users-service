// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: external/users/v1/social.proto

package usersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersSocialService_AddFriend_FullMethodName     = "/users.v1.UsersSocialService/AddFriend"
	UsersSocialService_AcceptFriend_FullMethodName  = "/users.v1.UsersSocialService/AcceptFriend"
	UsersSocialService_RejectFriend_FullMethodName  = "/users.v1.UsersSocialService/RejectFriend"
	UsersSocialService_RemoveFriend_FullMethodName  = "/users.v1.UsersSocialService/RemoveFriend"
	UsersSocialService_ListFriends_FullMethodName   = "/users.v1.UsersSocialService/ListFriends"
	UsersSocialService_BlockFriend_FullMethodName   = "/users.v1.UsersSocialService/BlockFriend"
	UsersSocialService_UnblockFriend_FullMethodName = "/users.v1.UsersSocialService/UnblockFriend"
)

// UsersSocialServiceClient is the client API for UsersSocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersSocialServiceClient interface {
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptFriend(ctx context.Context, in *AcceptFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectFriend(ctx context.Context, in *RejectFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListFriends(ctx context.Context, in *ListFriendsRequest, opts ...grpc.CallOption) (*FriendsList, error)
	BlockFriend(ctx context.Context, in *BlockFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnblockFriend(ctx context.Context, in *UnblockFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersSocialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersSocialServiceClient(cc grpc.ClientConnInterface) UsersSocialServiceClient {
	return &usersSocialServiceClient{cc}
}

func (c *usersSocialServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) AcceptFriend(ctx context.Context, in *AcceptFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_AcceptFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) RejectFriend(ctx context.Context, in *RejectFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_RejectFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) ListFriends(ctx context.Context, in *ListFriendsRequest, opts ...grpc.CallOption) (*FriendsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsList)
	err := c.cc.Invoke(ctx, UsersSocialService_ListFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) BlockFriend(ctx context.Context, in *BlockFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_BlockFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSocialServiceClient) UnblockFriend(ctx context.Context, in *UnblockFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersSocialService_UnblockFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersSocialServiceServer is the server API for UsersSocialService service.
// All implementations should embed UnimplementedUsersSocialServiceServer
// for forward compatibility.
type UsersSocialServiceServer interface {
	AddFriend(context.Context, *AddFriendRequest) (*emptypb.Empty, error)
	AcceptFriend(context.Context, *AcceptFriendRequest) (*emptypb.Empty, error)
	RejectFriend(context.Context, *RejectFriendRequest) (*emptypb.Empty, error)
	RemoveFriend(context.Context, *RemoveFriendRequest) (*emptypb.Empty, error)
	ListFriends(context.Context, *ListFriendsRequest) (*FriendsList, error)
	BlockFriend(context.Context, *BlockFriendRequest) (*emptypb.Empty, error)
	UnblockFriend(context.Context, *UnblockFriendRequest) (*emptypb.Empty, error)
}

// UnimplementedUsersSocialServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersSocialServiceServer struct{}

func (UnimplementedUsersSocialServiceServer) AddFriend(context.Context, *AddFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) AcceptFriend(context.Context, *AcceptFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) RejectFriend(context.Context, *RejectFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) ListFriends(context.Context, *ListFriendsRequest) (*FriendsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriends not implemented")
}
func (UnimplementedUsersSocialServiceServer) BlockFriend(context.Context, *BlockFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) UnblockFriend(context.Context, *UnblockFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockFriend not implemented")
}
func (UnimplementedUsersSocialServiceServer) testEmbeddedByValue() {}

// UnsafeUsersSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersSocialServiceServer will
// result in compilation errors.
type UnsafeUsersSocialServiceServer interface {
	mustEmbedUnimplementedUsersSocialServiceServer()
}

func RegisterUsersSocialServiceServer(s grpc.ServiceRegistrar, srv UsersSocialServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsersSocialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersSocialService_ServiceDesc, srv)
}

func _UsersSocialService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_AcceptFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).AcceptFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_AcceptFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).AcceptFriend(ctx, req.(*AcceptFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_RejectFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).RejectFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_RejectFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).RejectFriend(ctx, req.(*RejectFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_ListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).ListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_ListFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).ListFriends(ctx, req.(*ListFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_BlockFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).BlockFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_BlockFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).BlockFriend(ctx, req.(*BlockFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSocialService_UnblockFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSocialServiceServer).UnblockFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSocialService_UnblockFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSocialServiceServer).UnblockFriend(ctx, req.(*UnblockFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersSocialService_ServiceDesc is the grpc.ServiceDesc for UsersSocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersSocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.v1.UsersSocialService",
	HandlerType: (*UsersSocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _UsersSocialService_AddFriend_Handler,
		},
		{
			MethodName: "AcceptFriend",
			Handler:    _UsersSocialService_AcceptFriend_Handler,
		},
		{
			MethodName: "RejectFriend",
			Handler:    _UsersSocialService_RejectFriend_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _UsersSocialService_RemoveFriend_Handler,
		},
		{
			MethodName: "ListFriends",
			Handler:    _UsersSocialService_ListFriends_Handler,
		},
		{
			MethodName: "BlockFriend",
			Handler:    _UsersSocialService_BlockFriend_Handler,
		},
		{
			MethodName: "UnblockFriend",
			Handler:    _UsersSocialService_UnblockFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/users/v1/social.proto",
}
